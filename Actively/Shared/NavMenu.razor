@using Actively.Models;
@using Actively.Services
@inject IAppService AppService;
@inject NavigationManager NavManager;
<div class="top-row ps-3 navbar navbar-dark">
	<div class="container-fluid">
		<a class="navbar-brand" href="">LoginFlowInMauiBlazorApp</a>
		<button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
			<span class="navbar-toggler-icon"></span>
		</button>
	</div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
	<nav class="flex-column">
		<div class="nav-item px-3">
			<NavLink class="nav-link" href="" Match="NavLinkMatch.All">
				<span class="oi oi-home" aria-hidden="true"></span> Home
			</NavLink>
		</div>
		<div class="nav-item px-3">
			<NavLink class="nav-link" href="counter">
				<span class="oi oi-plus" aria-hidden="true"></span> Counter
			</NavLink>
		</div>
		<div class="nav-item px-3">
			<NavLink class="nav-link" href="fetchdata">
				<span class="oi oi-list-rich" aria-hidden="true"></span> Fetch data
			</NavLink>
		</div>
		<div class="nav-item px-3">
			<NavLink class="nav-link" href="appsettings/">
				<span class="oi oi-cog" aria-hidden="true"></span> Settings
			</NavLink>
		</div>
		<div class="nav-item px-3">
			<NavLink class="nav-link" href="#" @onclick="SignOut">
				<span class="oi oi-account-logout" aria-hidden="true"></span> Sign Out
			</NavLink>
		</div>
		@{
			if (supportedLanguages != null)
			{
				foreach (var language in supportedLanguages)
				{
					<div class="nav-item px-3">
						<NavLink class="nav-link" href="#" @onclick="() => ChangeLanguage(language.ToString())">
							<span class="oi oi-arrow-right" aria-hidden="true"></span>@language.ToString();
						</NavLink>
					</div>
				}
			}
		}
	</nav>
</div>

@code {
	private bool collapseNavMenu = true;
	private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;
	private List<string> supportedLanguages;

	private void ToggleNavMenu()
	{
		collapseNavMenu = !collapseNavMenu;
	}

	private void SignOut()
	{
		SecureStorage.RemoveAll();
		Settings.UserBasicDetail = null;
		NavManager.NavigateTo("/login");
	}

	protected override async Task OnInitializedAsync()
	{
		supportedLanguages = await AppService.GetSupportedLanguages();
		base.OnInitialized();
		this.StateHasChanged();
	}

	private async Task ChangeLanguage(string language)
	{
		var result = await AppService.ChangeLanguage(language);
		await App.Current.MainPage.DisplayAlert("", result.Message, "OK");
		this.StateHasChanged();
	}
}
